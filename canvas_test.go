package jujusvg

import (
	"bytes"
	"image"

	"github.com/ajstarks/svgo"
	. "gopkg.in/check.v1"
)

type CanvasSuite struct{}

var _ = Suite(&CanvasSuite{})

func (s *CanvasSuite) TestServiceRender(c *C) {
	// Ensure that the Service's definition and usage methods output the
	// proper SVG elements.
	var buf bytes.Buffer
	svg := svg.New(&buf)
	service := service{
		Point: image.Point{
			X: 0,
			Y: 0,
		},
		IconUrl: "foo",
	}
	service.definition(svg)
	service.usage(svg)
	c.Assert(buf.String(), Equals,
		`<image x="0" y="0" width="96" height="96" xlink:href="foo" />`+"\n")
}

func (s *CanvasSuite) TestRelationRender(c *C) {
	// Ensure that the Relation's definition and usage methods output the
	// proper SVG elements.
	var buf bytes.Buffer
	svg := svg.New(&buf)
	relation := serviceRelation{
		ServiceA: &service{
			Point: image.Point{
				X: 0,
				Y: 0,
			},
		},
		ServiceB: &service{
			Point: image.Point{
				X: 100,
				Y: 100,
			},
		},
	}
	relation.definition(svg)
	relation.usage(svg)
	c.Assert(buf.String(), Equals,
		`<line x1="48" y1="48" x2="148" y2="148" style="stroke:black"/>`+"\n")
}

func (s *CanvasSuite) TestLayout(c *C) {
	// Ensure that the SVG is sized exactly around the positioned services.
	canvas := Canvas{}
	canvas.AddService(&service{
		Point: image.Point{
			X: 0,
			Y: 0,
		},
	})
	canvas.AddService(&service{
		Point: image.Point{
			X: 100,
			Y: 100,
		},
	})
	width, height := canvas.layout()
	c.Assert(width, Equals, 196)
	c.Assert(height, Equals, 196)
	canvas.AddService(&service{
		Point: image.Point{
			X: -100,
			Y: -100,
		},
	})
	canvas.AddService(&service{
		Point: image.Point{
			X: -100,
			Y: 100,
		},
	})
	canvas.AddService(&service{
		Point: image.Point{
			X: 200,
			Y: -100,
		},
	})
	width, height = canvas.layout()
	c.Assert(width, Equals, 396)
	c.Assert(height, Equals, 296)
}

func (s *CanvasSuite) TestMarshal(c *C) {
	// Ensure that the internal representation of the canvas can be marshalled
	// to SVG.
	var buf bytes.Buffer
	canvas := Canvas{}
	serviceA := &service{
		Point: image.Point{
			X: 0,
			Y: 0,
		},
	}
	serviceB := &service{
		Point: image.Point{
			X: 100,
			Y: 100,
		},
	}
	canvas.AddService(serviceA)
	canvas.AddService(serviceB)
	canvas.AddRelation(&serviceRelation{
		ServiceA: serviceA,
		ServiceB: serviceB,
	})
	canvas.Marshal(&buf)
	c.Assert(buf.String(), Equals,
		`<?xml version="1.0"?>
<!-- Generated by SVGo -->
<svg width="196" height="196"
     xmlns="http://www.w3.org/2000/svg" 
     xmlns:xlink="http://www.w3.org/1999/xlink">
<defs>
</defs>
<g id="relations">
<line x1="48" y1="48" x2="148" y2="148" style="stroke:black"/>
</g>
<g id="services">
<image x="0" y="0" width="96" height="96" xlink:href="" />
<image x="100" y="100" width="96" height="96" xlink:href="" />
</g>
</svg>
`)
}
